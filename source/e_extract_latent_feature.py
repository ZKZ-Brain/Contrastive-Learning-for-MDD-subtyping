"""Svae latent representation Z generated by saved model."""
import numpy as np
import torch
from c_load_data import Data
from h_auxilary_functions import save_z

device=torch.device("cuda"if torch.cuda.is_available() else "cpu")

weight_path = '../c_torch_weight'
result_path= '../d_results_of_z'

n_samples = 10  # sampling numbers
x_input = torch.from_numpy(Data[:, np.newaxis, :, :, :])
x_input = x_input.to(device)

z_y_list,z_y_specific_list=[], [] # feature of all patients, size:3000*32

"Load CVAE model"
CVAE_model=torch.load(weight_path + '/CVAE/model_best.pth',map_location=device)  # load model weight
for i in range(n_samples):
    print(i,"-th epoch of CVAE")
    mu_y,log_var_y=CVAE_model._encoder(x_input)    #reconstruct Z
    mu_y_specific,log_var_y_specific=CVAE_model.encoder_specific(x_input)

    z_y=CVAE_model._sampling(mu=mu_y,log_var=log_var_y)
    z_y_specific=CVAE_model._sampling(mu=mu_y_specific,log_var=log_var_y_specific)

    z_y_list.append(z_y)
    z_y_specific_list.append(z_y_specific)

"Save features"
z_y_tensor=torch.stack(z_y_list,dim=0)
z_y_specific_tensor=torch.stack(z_y_specific_list,dim=0)

Z_y=z_y_tensor.detach().cpu().numpy()
Z_y_specific=z_y_specific_tensor.detach().cpu().numpy()

# save features as npz,size:n_samples*3000*32
save_z(result_path,Z_y,Z_y_specific)

